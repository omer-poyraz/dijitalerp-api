// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories.EFCore;

#nullable disable

namespace DijitalErpAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AssemblyFailureState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AssemblyManuelID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Inappropriateness")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("PendingQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("QualityDescriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualityOfficerDescription")
                        .HasColumnType("text");

                    b.Property<string>("QualityOfficerID")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicianID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssemblyManuelID");

                    b.HasIndex("QualityOfficerID");

                    b.HasIndex("TechnicianID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblyFailureStates");
                });

            modelBuilder.Entity("Entities.Models.AssemblyManuel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<string>("PersonInChargeID")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("QualityOfficerID")
                        .HasColumnType("text");

                    b.Property<string>("ResponibleID")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TechnicianDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonInChargeID");

                    b.HasIndex("QualityOfficerID");

                    b.HasIndex("ResponibleID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblyManuels");
                });

            modelBuilder.Entity("Entities.Models.AssemblyNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AssemblyManuelID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssemblyManuelID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblyNotes");
                });

            modelBuilder.Entity("Entities.Models.AssemblyQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("AssemblyFailureStateID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssemblyFailureStateID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblyQualities");
                });

            modelBuilder.Entity("Entities.Models.AssemblySuccessState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Approval")
                        .HasColumnType("text");

                    b.Property<int?>("AssemblyManuelID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("PendingQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("QualityDescription")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicianID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssemblyManuelID");

                    b.HasIndex("TechnicianID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblySuccessStates");
                });

            modelBuilder.Entity("Entities.Models.AssemblyVisualNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AssemblyManuelID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AssemblyManuelID");

                    b.HasIndex("UserId");

                    b.ToTable("AssemblyVisualNotes");
                });

            modelBuilder.Entity("Entities.Models.CMM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("CMMModuleID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InstallResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeasuringPersonID")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<string>("PersonInChargeID")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("QualityOfficerID")
                        .HasColumnType("text");

                    b.Property<string>("ResponibleID")
                        .HasColumnType("text");

                    b.Property<string>("ResultFiles")
                        .HasColumnType("text");

                    b.Property<string>("SolidModel")
                        .HasColumnType("text");

                    b.Property<string>("Stand")
                        .HasColumnType("text");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CMMModuleID");

                    b.HasIndex("MeasuringPersonID");

                    b.HasIndex("PersonInChargeID");

                    b.HasIndex("QualityOfficerID");

                    b.HasIndex("ResponibleID");

                    b.HasIndex("UserId");

                    b.ToTable("CMMs");
                });

            modelBuilder.Entity("Entities.Models.CMMFailureState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CMMID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Inappropriateness")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("PendingQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("QualityDescriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualityOfficerDescription")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicianID")
                        .HasColumnType("text");

                    b.Property<int?>("Total")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CMMID");

                    b.HasIndex("TechnicianID");

                    b.HasIndex("UserId");

                    b.ToTable("CMMFailureStates");
                });

            modelBuilder.Entity("Entities.Models.CMMModule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CMM")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("CMMModules");
                });

            modelBuilder.Entity("Entities.Models.CMMNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CMMID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CMMID");

                    b.HasIndex("UserId");

                    b.ToTable("CMMNotes");
                });

            modelBuilder.Entity("Entities.Models.CMMSuccessState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Approval")
                        .HasColumnType("text");

                    b.Property<int?>("CMMID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("PendingQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("QualityDescription")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TechnicianID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CMMID");

                    b.HasIndex("TechnicianID");

                    b.HasIndex("UserId");

                    b.ToTable("CMMSuccessStates");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Yönetim"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Bilişim Teknolojileri"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Kalite"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Mühendis"
                        },
                        new
                        {
                            ID = 5,
                            Name = "CNC Operator"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Tester"
                        });
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entities.Models.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Process")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.Models.Services", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndPoint")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndPoint = "/AssemblyFailureState",
                            Name = "AssemblyFailureState"
                        },
                        new
                        {
                            ID = 2,
                            EndPoint = "/AssemblyManuel",
                            Name = "AssemblyManuel"
                        },
                        new
                        {
                            ID = 3,
                            EndPoint = "/AssemblyNote",
                            Name = "AssemblyNote"
                        },
                        new
                        {
                            ID = 4,
                            EndPoint = "/AssemblyQuality",
                            Name = "AssemblyQuality"
                        },
                        new
                        {
                            ID = 5,
                            EndPoint = "/AssemblySuccessState",
                            Name = "AssemblySuccessState"
                        },
                        new
                        {
                            ID = 6,
                            EndPoint = "/AssemblyVisualNote",
                            Name = "AssemblyVisualNote"
                        },
                        new
                        {
                            ID = 7,
                            EndPoint = "/CMM",
                            Name = "CMM"
                        },
                        new
                        {
                            ID = 8,
                            EndPoint = "/CMMModule",
                            Name = "CMMModule"
                        },
                        new
                        {
                            ID = 9,
                            EndPoint = "/CMMFailureState",
                            Name = "CMMFailureState"
                        },
                        new
                        {
                            ID = 10,
                            EndPoint = "/CMMSuccessState",
                            Name = "CMMSuccessState"
                        },
                        new
                        {
                            ID = 11,
                            EndPoint = "/CMMNote",
                            Name = "CMMNote"
                        },
                        new
                        {
                            ID = 12,
                            EndPoint = "/Department",
                            Name = "Department"
                        },
                        new
                        {
                            ID = 13,
                            EndPoint = "/Employee",
                            Name = "Employee"
                        },
                        new
                        {
                            ID = 14,
                            EndPoint = "/Log",
                            Name = "Log"
                        },
                        new
                        {
                            ID = 15,
                            EndPoint = "/Product",
                            Name = "Product"
                        },
                        new
                        {
                            ID = 16,
                            EndPoint = "/Services",
                            Name = "Services"
                        },
                        new
                        {
                            ID = 17,
                            EndPoint = "/TechnicalDrawing",
                            Name = "TechnicalDrawing"
                        },
                        new
                        {
                            ID = 18,
                            EndPoint = "/TechnicalDrawingFailureState",
                            Name = "TechnicalDrawingFailureState"
                        },
                        new
                        {
                            ID = 19,
                            EndPoint = "/TechnicalDrawingNote",
                            Name = "TechnicalDrawingNote"
                        },
                        new
                        {
                            ID = 20,
                            EndPoint = "/TechnicalDrawingQuality",
                            Name = "TechnicalDrawingQuality"
                        },
                        new
                        {
                            ID = 21,
                            EndPoint = "/TechnicalDrawingSuccessState",
                            Name = "TechnicalDrawingSuccessState"
                        },
                        new
                        {
                            ID = 22,
                            EndPoint = "/TechnicalDrawingVisualNote",
                            Name = "TechnicalDrawingVisualNote"
                        },
                        new
                        {
                            ID = 23,
                            EndPoint = "/User",
                            Name = "User"
                        },
                        new
                        {
                            ID = 24,
                            EndPoint = "/UserPermission",
                            Name = "UserPermission"
                        });
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OperatorDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<string>("PersonInChargeID")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("QualityOfficerID")
                        .HasColumnType("text");

                    b.Property<string>("ResponibleID")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Stand")
                        .HasColumnType("text");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PersonInChargeID");

                    b.HasIndex("QualityOfficerID");

                    b.HasIndex("ResponibleID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawings");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingFailureState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Approval")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Inappropriateness")
                        .HasColumnType("text");

                    b.Property<string>("OperatorID")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("QualityDescriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QualityOfficerDescription")
                        .HasColumnType("text");

                    b.Property<string>("QualityOfficerID")
                        .HasColumnType("text");

                    b.Property<string>("Stand")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int?>("TechnicalDrawingID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("QualityOfficerID");

                    b.HasIndex("TechnicalDrawingID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawingFailureStates");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TechnicalDrawingID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TechnicalDrawingID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawingNotes");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("TechnicalDrawingFailureStateID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TechnicalDrawingFailureStateID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawingQualities");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingSuccessState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Approval")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("OperatorID")
                        .HasColumnType("text");

                    b.Property<string>("PartCode")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("QuantityDescription")
                        .HasColumnType("text");

                    b.Property<string>("Stand")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int?>("TechnicalDrawingID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("TechnicalDrawingID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawingSuccessStates");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingVisualNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TechnicalDrawingID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("TechnicalDrawingID");

                    b.HasIndex("UserId");

                    b.ToTable("TechnicalDrawingVisualNotes");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TCKNO")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28f1f2ba-c85c-412b-9c56-ddb52efcbc42",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "a888b4e8-8d30-4a6d-a736-68242ba100eb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eeb9bc5e-231c-4368-9ed8-54f5ab126b8d",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.AssemblyFailureState", b =>
                {
                    b.HasOne("Entities.Models.AssemblyManuel", "AssemblyManuel")
                        .WithMany("BasarisizDurumlar")
                        .HasForeignKey("AssemblyManuelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("QualityOfficerID");

                    b.HasOne("Entities.Models.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssemblyManuel");

                    b.Navigation("QualityOfficer");

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.AssemblyManuel", b =>
                {
                    b.HasOne("Entities.Models.User", "PersonInCharge")
                        .WithMany()
                        .HasForeignKey("PersonInChargeID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("QualityOfficerID");

                    b.HasOne("Entities.Models.User", "Responible")
                        .WithMany()
                        .HasForeignKey("ResponibleID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PersonInCharge");

                    b.Navigation("QualityOfficer");

                    b.Navigation("Responible");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.AssemblyNote", b =>
                {
                    b.HasOne("Entities.Models.AssemblyManuel", "AssemblyManuel")
                        .WithMany("AssemblyNotes")
                        .HasForeignKey("AssemblyManuelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssemblyManuel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.AssemblyQuality", b =>
                {
                    b.HasOne("Entities.Models.AssemblyFailureState", "AssemblyFailureState")
                        .WithMany("QualityOfficerDescriptions")
                        .HasForeignKey("AssemblyFailureStateID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssemblyFailureState");

                    b.Navigation("QualityOfficer");
                });

            modelBuilder.Entity("Entities.Models.AssemblySuccessState", b =>
                {
                    b.HasOne("Entities.Models.AssemblyManuel", "AssemblyProject")
                        .WithMany("BasariliDurumlar")
                        .HasForeignKey("AssemblyManuelID");

                    b.HasOne("Entities.Models.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssemblyProject");

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.AssemblyVisualNote", b =>
                {
                    b.HasOne("Entities.Models.AssemblyManuel", "AssemblyManuel")
                        .WithMany()
                        .HasForeignKey("AssemblyManuelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssemblyManuel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.CMM", b =>
                {
                    b.HasOne("Entities.Models.CMMModule", "CMMModule")
                        .WithMany()
                        .HasForeignKey("CMMModuleID");

                    b.HasOne("Entities.Models.User", "MeasuringPerson")
                        .WithMany()
                        .HasForeignKey("MeasuringPersonID");

                    b.HasOne("Entities.Models.User", "PersonInCharge")
                        .WithMany()
                        .HasForeignKey("PersonInChargeID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("QualityOfficerID");

                    b.HasOne("Entities.Models.User", "Responible")
                        .WithMany()
                        .HasForeignKey("ResponibleID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CMMModule");

                    b.Navigation("MeasuringPerson");

                    b.Navigation("PersonInCharge");

                    b.Navigation("QualityOfficer");

                    b.Navigation("Responible");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.CMMFailureState", b =>
                {
                    b.HasOne("Entities.Models.CMM", "CMM")
                        .WithMany("BasarisizDurumlar")
                        .HasForeignKey("CMMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CMM");

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.CMMModule", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.CMMNote", b =>
                {
                    b.HasOne("Entities.Models.CMM", "CMM")
                        .WithMany("CMMNotes")
                        .HasForeignKey("CMMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CMM");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.CMMSuccessState", b =>
                {
                    b.HasOne("Entities.Models.CMM", "CMM")
                        .WithMany("BasariliDurumlar")
                        .HasForeignKey("CMMID");

                    b.HasOne("Entities.Models.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CMM");

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Log", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Services", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawing", b =>
                {
                    b.HasOne("Entities.Models.User", "PersonInCharge")
                        .WithMany()
                        .HasForeignKey("PersonInChargeID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("QualityOfficerID");

                    b.HasOne("Entities.Models.User", "Responible")
                        .WithMany()
                        .HasForeignKey("ResponibleID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PersonInCharge");

                    b.Navigation("QualityOfficer");

                    b.Navigation("Responible");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingFailureState", b =>
                {
                    b.HasOne("Entities.Models.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("QualityOfficerID");

                    b.HasOne("Entities.Models.TechnicalDrawing", "TechnicalDrawing")
                        .WithMany("BasarisizDurumlar")
                        .HasForeignKey("TechnicalDrawingID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Operator");

                    b.Navigation("QualityOfficer");

                    b.Navigation("TechnicalDrawing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingNote", b =>
                {
                    b.HasOne("Entities.Models.TechnicalDrawing", "TechnicalDrawing")
                        .WithMany("TechnicalDrawingNotes")
                        .HasForeignKey("TechnicalDrawingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("TechnicalDrawing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingQuality", b =>
                {
                    b.HasOne("Entities.Models.TechnicalDrawingFailureState", "TechnicalDrawingFailureState")
                        .WithMany("QualityOfficerDescriptions")
                        .HasForeignKey("TechnicalDrawingFailureStateID");

                    b.HasOne("Entities.Models.User", "QualityOfficer")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("QualityOfficer");

                    b.Navigation("TechnicalDrawingFailureState");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingSuccessState", b =>
                {
                    b.HasOne("Entities.Models.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorID");

                    b.HasOne("Entities.Models.TechnicalDrawing", "TechnicalDrawing")
                        .WithMany("BasariliDurumlar")
                        .HasForeignKey("TechnicalDrawingID");

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Operator");

                    b.Navigation("TechnicalDrawing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingVisualNote", b =>
                {
                    b.HasOne("Entities.Models.TechnicalDrawing", "TechnicalDrawing")
                        .WithMany()
                        .HasForeignKey("TechnicalDrawingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("TechnicalDrawing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Models.UserPermission", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.AssemblyFailureState", b =>
                {
                    b.Navigation("QualityOfficerDescriptions");
                });

            modelBuilder.Entity("Entities.Models.AssemblyManuel", b =>
                {
                    b.Navigation("AssemblyNotes");

                    b.Navigation("BasariliDurumlar");

                    b.Navigation("BasarisizDurumlar");
                });

            modelBuilder.Entity("Entities.Models.CMM", b =>
                {
                    b.Navigation("BasariliDurumlar");

                    b.Navigation("BasarisizDurumlar");

                    b.Navigation("CMMNotes");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawing", b =>
                {
                    b.Navigation("BasariliDurumlar");

                    b.Navigation("BasarisizDurumlar");

                    b.Navigation("TechnicalDrawingNotes");
                });

            modelBuilder.Entity("Entities.Models.TechnicalDrawingFailureState", b =>
                {
                    b.Navigation("QualityOfficerDescriptions");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
